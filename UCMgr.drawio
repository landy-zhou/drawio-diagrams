<mxfile host="app.diagrams.net" modified="2023-09-07T12:46:00.787Z" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36" etag="QU3bWSaSiV_ZzJHVzTnK" version="21.6.8" type="github">
  <diagram name="Page-1" id="8FDqvaedv1lFMwNtDAfK">
    <mxGraphModel dx="1793" dy="988" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <UserObject label="&lt;pre&gt;                                                                                                                                                                      ,--------------------------------------------------------------------------.                                                                            &#xa;                                                                                                                                                                      |ExtensionModule                                                           |                                                                            &#xa;                                                                                                                                                                      |--------------------------------------------------------------------------|                                                                            &#xa;                                                                                                                                                                      |- m_pClientList[ MaxNum_logical_Cameras ]                                 |                                                                            &#xa;                                                                                                                                                                      |- UsecaseFactory*         m_pUsecaseFactory                               |                                                                            &#xa;                                                                                                                                                                      |                                                                          |                                                                            &#xa;                                                                                                                                                                      |+InitializeOverrideSession()                                              |                                                                            &#xa;                                                                                                                                                                      |+TeardownOverrideUsecase()                                                |                                                                            &#xa;                                                                                                                                                                      |+OverrideProcessRequest()                                                 |                                                                            &#xa;                                                                                                                                                                      |+OverrideStartRecurrentCaptureRequests()                                  |                                                                            &#xa;                                                                                                                                                                      |+OverrideStopRecurrentCaptureRequests()                                   |                                                                            &#xa;                                                                                                                                                                      |+OverrideSetSettings()                                                    |                                                                            &#xa;                                                                                                                                                                      |+OverrideActivateChannel()                                                |                                                                            &#xa;                                                                                                                                                                      |+OverrideFlush()                                                          |                                                                            &#xa;                                                                                                                                                                      |+OverrideDump()                                                           |                                                                            &#xa;                                                                                                                                                                      |                                                                          |                                                                            &#xa;                                                                                                                                                                      |+ ReturnStreamBuffers()                                                   |                                                                            &#xa;                                                                                                                                                                      |+ RequestStreamBuffers()                                                  |                                                                            &#xa;                                                                                                                                                                      |                                                                          |                                                                            &#xa;                                                                                                                                                                      |+ ReturnFrameworkResult(const camera3_capture_result_t* pResult, cameraID)|                                                                            &#xa;                                                                                                                                                                      |+ ReturnFrameworkRecurrentResult()                                        |                                                                            &#xa;                                                                                                                                                                      |+ ProcessSystemEventMessage()                                             |                                                                            &#xa;                                                                                                                                                                      |+ ReturnFrameworkMessage(const camera3_notify_msg_t* pMessage, cameraID)  |                                                                            &#xa;                                                                                                                                                                      |+ ReturnFrameworkRecurrentRequestMessage()                                |                                                                            &#xa;                                                                                                                                                                      |+ ReturnDeviceError(pMessageDescriptor,cameraId)                          |                                                                            &#xa;                                                                                                                                                                      `--------------------------------------------------------------------------&#39;                                                                            &#xa;                                                                                                                                                                                                                                                                                                                              &#xa;                                                                                                                                                                                                                                                                                                                              &#xa;                               ,--------------------------------------------------------------------------------------------------.                                                                                                                                                                                           &#xa;                               |UsecaseManager                                                                                    |                                                                                                                                                                                           &#xa;                               |--------------------------------------------------------------------------------------------------|                                                                                                                                                                                           &#xa;                               |-UsecaseManager()                                                                                 |                                                                                                                                                                                           &#xa;                               |+{static}UsecaseManager* getInstance()                                                            |                                                                                                                                                                                           &#xa;                               |+~UsecaseManager()                                                                                |                                                                                                                                                                                           &#xa;                               |                                                                                                  |                                                                                                                                                                                           &#xa;                               |+CDKResult RegisterClient(const ClientInfo* pClientInfo)                                          |                                                                                                                                                                                           &#xa;                               |+CDKResult UnregisterClient(UsecaseMgrClientHandle hClient)                                       |                                                                                                                                                                                           &#xa;                               |                                                                                                  |                                                                                                                                                                                           &#xa;                               |+CDKResult SetStreams(UsecaseMgrClientHandle hClient,const CHISTREAM*  pStreams, UINT32 numSteams)|                                                                                                                                                                                           &#xa;                               |+const CHISTREAM* GetOutputStreamsInfo(UsecaseMgrClientHandle hClient);                           |                                                                                                                                                                                           &#xa;,---------.  ,-------------.   |+CDKResult AcquireClient(UsecaseMgrClientHandle hClient)                                          |   ,---------------------------------------------.                                             ,------------------------------------------------------------------------------------------.&#xa;|QVRClient|  |Camera2Client|   |+CDKResult ActivateClient(UsecaseMgrClientHandle hClient)                                         |   |UsecaseMgrClientFactory                      |                                             |UsecaseFactory                                                                            |&#xa;|---------|  |-------------|   |+CDKResult DeactivateClient(UsecaseMgrClientHandle hClient)                                       |   |---------------------------------------------|                                             |------------------------------------------------------------------------------------------|&#xa;`---------&#39;  `-------------&#39;   |+CDKResult FlushClient(UsecaseMgrClientHandle hClient)                                            |   |+{static}UsecaseMgrClient* Create(createInfo)|                                             |+VOID* CreateUsecaseObject(LogicalCameraInfo*,usecaseId, pStreamConfig, hDescriptorConfig)|&#xa;                               |                                                                                                  |   `---------------------------------------------&#39;                                             `------------------------------------------------------------------------------------------&#39;&#xa;                               |ProcessRequest(UsecaseMgrClientHandle hClient, camera3_capture_request_t* pRequest)               |                                                                                                                                                                                           &#xa;                               |                                                                                                  |                                                                                                                                                                                           &#xa;                               |+VOID (*ReturnResult)(const camera3_capture_result_t* pResult);                                   |                                                                                                                                                                                           &#xa;                               |+VOID (*ReturnMsg)(const camera3_notify_msg_t* pMsg);                                             |                                                                                                                                                                                           &#xa;                               |                                                                                                  |                                                                                                                                                                                           &#xa;                               |#CDKResult SetOutputStreams(const CHISTREAM*   pStreams, UINT32 numSteams)                        |                                                                                                                                                                                           &#xa;                               |#CDKResult SetInputStreams(const CHISTREAM*  pStreams, UINT32 numSteams)                          |                                                                                                                                                                                           &#xa;                               |                                                                                                  |                                                                                                                                                                                           &#xa;                               |-std::map&lt;UsecaseMgrClientHandle, UsecaseMgrClient&gt;    *m_clients                                 |                                                                                                                                                                                           &#xa;                               |--std::map&lt;CHISTREAM* pStream, UsecaseXR&gt;    *m_mapStreamUsecase                                  |                                                                                                                                                                                           &#xa;                               |- UsecaseFactory*         m_pUsecaseFactory                                                       |                                                                                                                                                                                           &#xa;                               `--------------------------------------------------------------------------------------------------&#39;                                                                                                                                                                                           &#xa;                                                                                                                                                                                                                                                                                                                              &#xa;            ,----------------------------------------------------------------------------.                                                                                                                                                                                                                                    &#xa;            |UsecaseMgrClient                                                            |                                                                   ,--------------------------------------------------------------------------------------------.                                                                   &#xa;            |----------------------------------------------------------------------------|                                                                   |UsecaseXR                                                                                   |                                                                   &#xa;            |+UsecaseMgrClient()                                                         |                                                                   |--------------------------------------------------------------------------------------------|                                                                   &#xa;            |+{abstract} ~UsecaseMgrClient()                                             |                                                                   |+Create(pCameraInfo, pStreamConfig)                                                         |                                                                   &#xa;            |+CDKResult Initialize(const ClientInfo* pClientInfo)                        |                                                                   |+Destroy(BOOL isForced)                                                                     |                                                                   &#xa;            |+CDKResult SetUsecaseManager(UsecaseManager&amp; rUsecaseManager)               |                                                                   |+ProcessCaptureRequest(camera3_capture_request_t* pRequest)                                 |                                                                   &#xa;            |                                                                            |                                                                   |+StartRecurrentCaptureRequest( numRequests, camera3_recurrent_capture_request_t** ppRequest)|                                                                   &#xa;            |+CDKResult ConfigStreams(const CHISTREAM*  pStreams);                       |                                                                   |+StopRecurrentCaptureRequest()                                                              |                                                                   &#xa;            |+CDKResult Start();                                                         |                                                                   |+SetSettings(numSettings, pSettings, overwritePreviousSettings)                             |                                                                   &#xa;            |+CDKResult ProcessRequest(camera3_capture_request_t* pRequest);             |                                                                   |+ActivateChannels()                                                                         |                                                                   &#xa;            |+CDKResult Flush();                                                         |                                                                   |+Flush()                                                                                    |                                                                   &#xa;            |+CDKResult Stop();                                                          |                                                                   |+Dump()                                                                                     |                                                                   &#xa;            |                                                                            |                                                                   |                                                                                            |                                                                   &#xa;            |+{abstract} VOID (*OnReturnResult)(const camera3_capture_result_t* pResult);|                                                                   |-ProcessResult(ChiCaptureResult* pResult)                                                   |                                                                   &#xa;            |+{abstract} VOID (*OnReturnMsg)(const camera3_notify_msg_t* pMsg);          |                                                                   |-ProcessRecurrentResult(const camera3_capture_result_t* pResult, cameraID)                  |                                                                   &#xa;            |                                                                            |                                                                   |-ProcessSystemEventMessage()                                                                |                                                                   &#xa;            |-const std::vector&lt;CHISTREAM*&gt;       m_outputStreams                        |                                                                   |-ReturnFrameworkMessageForSingleCapture()                                                   |                                                                   &#xa;            |-const std::vector&lt;CHISTREAM*&gt;       m_inputStreams                         |                                                                   |-ReturnFrameworkMessageForRecurrentRequests()                                               |                                                                   &#xa;            |-UsecaseManager&amp;                     m_rUsecaseManager                      |                                                                   |-ReturnDeviceError()                                                                        |                                                                   &#xa;            |-ClientInfo                          m_clientData                           |                                                                   `--------------------------------------------------------------------------------------------&#39;                                                                   &#xa;            `----------------------------------------------------------------------------&#39;                                                                                                                                                                                                                                    &#xa;&lt;/pre&gt;" plantUmlData="{&#xa;  &quot;data&quot;: &quot;@startuml\n\nclass UsecaseMgrClientFactory\n{\n    &#39; Create one UsecaseMgrClient and register to UsecaseMgr\n    +{static}UsecaseMgrClient* Create(createInfo)\n}\n\n\nclass UsecaseMgrClient\n{\n    +UsecaseMgrClient()\n    +{abstract} ~UsecaseMgrClient()\n    +CDKResult Initialize(const ClientInfo* pClientInfo)\n    &#39; set low level UsecaseMgr after RegisterClient\n    +CDKResult SetUsecaseManager(UsecaseManager&amp; rUsecaseManager)\n\n    /&#39; \n        functions for extensionmodule\n        configure/streaming\n    &#39;/\n    +CDKResult ConfigStreams(const CHISTREAM*  pStreams);\n    +CDKResult Start();\n    +CDKResult ProcessRequest(camera3_capture_request_t* pRequest);\n    +CDKResult Flush();\n    +CDKResult Stop();\n\n    /&#39;  result callback\n        virtual function need implemente in instance\n    &#39;/\n    +{abstract} VOID (*OnReturnResult)(const camera3_capture_result_t* pResult);\n    +{abstract} VOID (*OnReturnMsg)(const camera3_notify_msg_t* pMsg);\n\n    /&#39; set streams information to UCMgr\n    +CDKResult SetStreams(const CHISTREAM*  pStreams, UINT32 numSteams);\n    +CDKResult SetOutputStreams(const CHISTREAM*   pStreams, UINT32 numSteams);\n    +CDKResult SetInputStreams(const CHISTREAM*  pStreams, UINT32 numSteams);\n    +const CHISTREAM* GetOutputStreamsInfo();\n    &#39; reserve means start config streams \n    +CDKResult Reserve(const CHISTREAM*  pStreams, UINT32 numSteams);\n\n    &#39; stream on / stream off\n    +{abstract} CDKResult Activate();\n    +{abstract} CDKResult Deactivate();\n    &#39;/\n    &#39; input/output streams\n    -const std::vector&lt;CHISTREAM*&gt;       m_outputStreams\n    -const std::vector&lt;CHISTREAM*&gt;       m_inputStreams\n    -UsecaseManager&amp;                     m_rUsecaseManager\n    -ClientInfo                          m_clientData\n}\n\nUsecaseMgrClientFactory ..&gt; UsecaseMgrClient\nQVRClient --|&gt; UsecaseMgrClient\nCamera2Client --|&gt; UsecaseMgrClient\n\nExtensionModule::m_pClientList --&gt; UsecaseMgrClientFactory :Only create client for VST camera\n\nclass UsecaseManager\n{\n    &#39; Singleton\n    -UsecaseManager()\n    +{static}UsecaseManager* getInstance()\n    +~UsecaseManager()\n\n    +CDKResult RegisterClient(const ClientInfo* pClientInfo)\n    +CDKResult UnregisterClient(UsecaseMgrClientHandle hClient)\n\n    +CDKResult SetStreams(UsecaseMgrClientHandle hClient,const CHISTREAM*  pStreams, UINT32 numSteams)\n    +const CHISTREAM* GetOutputStreamsInfo(UsecaseMgrClientHandle hClient);\n    &#39; Acquire means start config streams \n    +CDKResult AcquireClient(UsecaseMgrClientHandle hClient)\n    +CDKResult ActivateClient(UsecaseMgrClientHandle hClient)\n    +CDKResult DeactivateClient(UsecaseMgrClientHandle hClient)\n    +CDKResult FlushClient(UsecaseMgrClientHandle hClient)\n\n    &#39; request/result\n    ProcessRequest(UsecaseMgrClientHandle hClient, camera3_capture_request_t* pRequest)\n\n    +VOID (*ReturnResult)(const camera3_capture_result_t* pResult);\n    +VOID (*ReturnMsg)(const camera3_notify_msg_t* pMsg);\n\n    #CDKResult SetOutputStreams(const CHISTREAM*   pStreams, UINT32 numSteams)\n    #CDKResult SetInputStreams(const CHISTREAM*  pStreams, UINT32 numSteams)\n\n    &#39; handle to client map\n    -std::map&lt;UsecaseMgrClientHandle, UsecaseMgrClient&gt;    *m_clients\n    &#39; stream to usecase map\n    --std::map&lt;CHISTREAM* pStream, UsecaseXR&gt;    *m_mapStreamUsecase\n    - UsecaseFactory*         m_pUsecaseFactory\n}\nUsecaseManager \&quot;1\&quot;*-- \&quot;many\&quot;UsecaseMgrClient\n\nclass ExtensionModule\n{\n    - m_pClientList[ MaxNum_logical_Cameras ]\n    - UsecaseFactory*         m_pUsecaseFactory\n\n    +InitializeOverrideSession()\n    +TeardownOverrideUsecase()\n    +OverrideProcessRequest()\n    +OverrideStartRecurrentCaptureRequests()\n    +OverrideStopRecurrentCaptureRequests()\n    +OverrideSetSettings()\n    +OverrideActivateChannel()\n    +OverrideFlush()\n    +OverrideDump()\n\n    &#39;stream buffer ops\n    + ReturnStreamBuffers()\n    + RequestStreamBuffers()\n\n    &#39;result callbacks\n    + ReturnFrameworkResult(const camera3_capture_result_t* pResult, cameraID)\n    + ReturnFrameworkRecurrentResult()\n    + ProcessSystemEventMessage()\n    + ReturnFrameworkMessage(const camera3_notify_msg_t* pMessage, cameraID)\n    + ReturnFrameworkRecurrentRequestMessage()\n    + ReturnDeviceError(pMessageDescriptor,cameraId)\n}\n\nclass UsecaseXR\n{\n    +Create(pCameraInfo, pStreamConfig)\n    +Destroy(BOOL isForced)\n    +ProcessCaptureRequest(camera3_capture_request_t* pRequest)\n    +StartRecurrentCaptureRequest( numRequests, camera3_recurrent_capture_request_t** ppRequest)\n    +StopRecurrentCaptureRequest()\n    +SetSettings(numSettings, pSettings, overwritePreviousSettings)\n    +ActivateChannels()\n    +Flush()\n    +Dump()\n\n    -ProcessResult(ChiCaptureResult* pResult)\n    -ProcessRecurrentResult(const camera3_capture_result_t* pResult, cameraID)\n    -ProcessSystemEventMessage()\n    -ReturnFrameworkMessageForSingleCapture()\n    -ReturnFrameworkMessageForRecurrentRequests()\n    -ReturnDeviceError()\n}\n\nclass UsecaseFactory\n{\n    +VOID* CreateUsecaseObject(LogicalCameraInfo*,usecaseId, pStreamConfig, hDescriptorConfig)\n}\n\nExtensionModule::InitializeOverrideSession ..&gt; UsecaseFactory::CreateUsecaseObject\nUsecaseFactory::CreateUsecaseObject..&gt;UsecaseXR::Create\nExtensionModule::TeardownOverrideUsecase ..&gt; UsecaseXR::Destroy\nExtensionModule::OverrideProcessRequest ..&gt; UsecaseXR::ProcessCaptureRequest\nExtensionModule::OverrideStopRecurrentCaptureRequests ..&gt; UsecaseXR::StopRecurrentCaptureRequest\nExtensionModule::OverrideStartRecurrentCaptureRequests ..&gt; UsecaseXR::StartRecurrentCaptureRequest\nExtensionModule::OverrideSetSettings ..&gt; UsecaseXR::SetSettings\nExtensionModule::OverrideActivateChannel ..&gt; UsecaseXR::ActivateChannels\nExtensionModule::OverrideFlush ..&gt; UsecaseXR::Flush\nExtensionModule::OverrideDump ..&gt; UsecaseXR::Dump\n\nUsecaseXR::ProcessResult ..&gt; ExtensionModule::ReturnFrameworkResult\nUsecaseXR::ProcessRecurrentResult ..&gt; ExtensionModule::ReturnFrameworkRecurrentResult\nUsecaseXR::ProcessSystemEventMessage ..&gt; ExtensionModule::ReturnFrameworkResult\nUsecaseXR::ReturnFrameworkMessageForSingleCapture ..&gt; ExtensionModule::ReturnFrameworkMessage\nUsecaseXR::ReturnFrameworkMessageForRecurrentRequests ..&gt; ExtensionModule::ReturnFrameworkRecurrentRequestMessage\nUsecaseXR::ReturnDeviceError ..&gt; ExtensionModule::ReturnDeviceError\n\n@enduml&quot;,&#xa;  &quot;format&quot;: &quot;txt&quot;&#xa;}" id="1qilEDKDuHCG4IohSjQQ-1">
          <mxCell style="text;html=1;align=left;verticalAlign=top;" vertex="1" parent="1">
            <mxGeometry x="170" y="460" width="2120" height="1190" as="geometry" />
          </mxCell>
        </UserObject>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
